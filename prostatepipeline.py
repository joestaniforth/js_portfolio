import argparse
import sys
import allel as al
import csv
import os

log_odds_dict = {
'rs7542260':0,
'rs2847344':0.0174507295105361,
'rs10803412':0.0224283711854865,
'rs544780844':0.0273496077747565,
'rs56391074':0.0191162904470728,
'rs1811698':0.0322157032979816,
'rs607518':0.0265332645232967,
'rs10127983':0.0277572046905535,
'rs56103503':0.024485667699167,
'rs147847496':0.0663259253620378,
'rs184104770':0.0689276116820718,
'rs80237341':0.0595634179012677,
'rs6660538':0.0174507295105361,
'rs4075646':0.0285712526925376,
'rs507603':0.0203612826477079,
'rs34295433':0.0174507295105361,
'rs138638958':0.0191162904470728,
'rs4245739':0.0382226383687185,
'rs708723':0.0211892990699381,
'rs11686272':0.0178677189635057,
'rs73913932':0.0334237554869497,
'rs1990613':0.0257153839013406,
'rs7602028':0.024485667699167,
'rs9306894':0.0358298252528282,
'rs6738169':0.0182843084265308,
'rs7591218':0.0285712526925376,
'rs28514770':0.0199466816788423,
'rs11125927':0.0366288953621611,
'rs58235267':0.04883008652835,
'rs139283528':0.105850674385144,
'rs74702681':0.0689276116820718,
'rs2028900':0.0370278797557749,
'rs2165108':0.0334237554869497,
'rs11691517':0.0228406108765278,
'rs111595856':0.0350292822023682,
'rs10206072':0.0240749873074262,
'rs16854905':0.024485667699167,
'rs77167534':0.0916669575956846,
'rs34925593':0.0228406108765278,
'rs1861270':0.0207754881935578,
'rs12621900':0.0203612826477079,
'rs74001374':0.0534626049254553,
'rs2292884':0.0265332645232967,
'rs77559646':0.123198075031999,
'rs77482050':0.155943017971837,
'rs2074840':0.0211892990699381,
'rs76832527':0.044539760392411,
'rs6550597':0.0191162904470728,
'rs7618603':0.0253058652647703,
'rs34680713':0.0257153839013406,
'rs13091518':0.0166155475571774,
'rs143745027':0.0678145111618401,
'rs7628934':0.0406023401140731,
'rs114810266':0.0663259253620378,
'rs1283104':0.0191162904470728,
'rs151038334':0.0330214446829107,
'rs2271494':0.0338256939533103,
'rs2811476':0.0421815945157663,
'rs35006112':0.0346284566253203,
'rs1457063':0.0187004986662434,
'rs7650602':0.0207754881935578,
'rs145053401':0.0362295440862945,
'rs2293607':0.0253058652647703,
'rs78416326':0.0813473078041325,
'rs577952184':0.0413926851582251,
'rs11717887':0.0174507295105361,
'rs17804499':0.0842186867392388,
'rs13142786':0.0297894708318556,
'rs6853490':0.0322157032979816,
'rs7679673':0.0413926851582251,
'rs17035310':0.028977705208778,
'rs77821238':0.0228406108765278,
'rs72725734':0.0220157398177203,
'rs147762399':0.0350292822023682,
'rs2242652':0.0584260244570054,
'rs71595003':0.0748164406451747,
'rs2736098':0.0301947853567512,
'rs4975758':0.0417873189717518,
'rs71599622':0.0199466816788423,
'rs10941370':0.0157787563890409,
'rs1482675':0.0153597554092142,
'rs9292122':0.0182843084265308,
'rs10793821':0.024485667699167,
'rs76551843':0.117602691690084,
'rs9686557':0.0149403497929365,
'rs61739424':0.0433622780211295,
'rs2672843':0.0203612826477079,
'rs2814811':0.0187004986662434,
'rs2018336':0.0269416279590294,
'rs6927369':0.0281644194244699,
'rs4269363':0.0187004986662434,
'rs12665509':0.0174507295105361,
'rs35159226':0.0187004986662434,
'rs62407547':0.0236639181977935,
'rs9275160':0.0187004986662434,
'rs9469899':0.0191162904470728,
'rs4714485':0.0409976924234906,
'rs9472120':0.0166155475571774,
'rs9443189':0.0314084642516241,
'rs2038542':0.0281644194244699,
'rs339351':0.04766419460156,
'rs150184171':0.0199466816788423,
'rs13215045':0.0310042813635368,
'rs963800':0.0269416279590294,
'rs4646284':0.0799044676667207,
'rs4513875':0.0174507295105361,
'rs11452686':0.0182843084265308,
'rs9655205':0.0378247505883419,
'rs35389879':0.0178677189635057,
'rs6956484':0.0236639181977935,
'rs10486567':0.0480531731156091,
'rs12701838':0.0273496077747565,
'rs834608':0.0216027160282422,
'rs6955627':0.0236639181977935,
'rs4727386':0.0413926851582251,
'rs870167':0.0273496077747565,
'rs2572375':0.0195316845312555,
'rs6557704':0.0301947853567512,
'rs1160267':0.0674428427763807,
'rs141811748':0.0326187608507199,
'rs12677206':0.0187004986662434,
'rs11467':0.0174507295105361,
'rs73700335':0.0228406108765278,
'rs57588856':0.0199466816788423,
'rs6984837':0.0354297381845483,
'rs7011138':-0.0268721464003014,
'rs7463326':0.0722498976135148,
'rs72725854':0.319522449065454,
'rs77541621':0.276921132065774,
'rs72725879':0.112269768417271,
'rs183373024':0.355834495884936,
'rs78809737':0.0350292822023682,
'rs201057014':0.0240749873074262,
'rs17464492':0.0484418035504045,
'rs6983267':0.0685568950723632,
'rs10090154':0.129367595722986,
'rs34265760':0.0480531731156091,
'rs12549761':0.0704073217401197,
'rs34540271':0.0216027160282422,
'rs10122990':0.0232524596337114,
'rs17694493':0.0310042813635368,
'rs10122495':0.0216027160282422,
'rs142727307':0.0318122713303704,
'rs4451364':0.0220157398177203,
'rs817872':0.0297894708318556,
'rs143655302':0.115277591395901,
'rs2241167':0.0161973535124391,
'rs12634':0.024485667699167,
'rs12781100':0.0330214446829107,
'rs7075427':0.0492180226701817,
'rs11599847':0.0472748673841795,
'rs10993994':0.0835026198302674,
'rs11817544':0.0374264979406237,
'rs12412705':0.0285712526925376,
'rs1935581':0.0191162904470728,
'rs12262998':0.0305997219659511,
'rs10885396':0.0182843084265308,
'rs4558107':0.0253058652647703,
'rs140783917':0.0824263008607719,
'rs10788167':0.0265332645232967,
'rs10749415':0.04766419460156,
'rs12769682':0.024895960107485,
'rs1881502':0.0224283711854865,
'rs11043143':0.0648322197385739,
'rs61890184':0.0342272607705507,
'rs68010938':0.0187004986662434,
'rs1048374':0.0546130545568877,
'rs2277283':0.0228406108765278,
'rs12785905':0.0503797562614578,
'rs3018690':0.0195316845312555,
'rs11825796':0.039017321997412,
'rs11228580':0.103803720955957,
'rs3918298':0.0549958615291415,
'rs56159348':0.0240749873074262,
'rs11568818':0.0318122713303704,
'rs74911261':0.061829307294699,
'rs5794883':0.028977705208778,
'rs138466039':0.121887985103681,
'rs878987':0.0277572046905535,
'rs2066827':0.0232524596337114,
'rs77216612':0.0161973535124391,
'rs10845938':0.0240749873074262,
'rs80130819':0.0394141191761371,
'rs56222401':0.0326187608507199,
'rs113925811':0.0711452904510828,
'rs187809440':0.127752515832973,
'rs7968403':0.024485667699167,
'rs4842687':0.0269416279590294,
'rs77121786':0.0203612826477079,
'rs1270884':0.0301947853567512,
'rs7295014':0.0232524596337114,
'rs1327653':0.0187004986662434,
'rs7489409':0.0358298252528282,
'rs7336001':0.0409976924234906,
'rs75823044':0.183269843682805,
'rs1004030':0.0166155475571774,
'rs6571758':0.0265332645232967,
'rs11849126':0.0187004986662434,
'rs4901313':0.0346284566253203,
'rs8005621':0.0297894708318556,
'rs79133931':0.0461047872460387,
'rs2093202':0.0174507295105361,
'rs767127':0.0220157398177203,
'rs17565772':0.0178677189635057,
'rs11561564':0.0273496077747565,
'rs33984059':0.0755469613925307,
'rs74634457':0.0211892990699381,
'rs8023793':0.0132586652835165,
'rs12913603':0.0166155475571774,
'rs7188897':0.0195316845312555,
'rs13380763':0.0236639181977935,
'rs11863709':0.0569048513364726,
'rs28709974':0.0374264979406237,
'rs8052913':0.0178677189635057,
'rs684232':0.0350292822023682,
'rs78378222':0.101059354908116,
'rs28441558':0.0663259253620378,
'rs72811270':0.0240749873074262,
'rs4795646':0.0240749873074262,
'rs3110641':0.0236639181977935,
'rs11649743':0.044539760392411,
'rs11263763':0.0842186867392388,
'rs138213197':0.599446375725276,
'rs2960158':0.0191162904470728,
'rs565189650':0.0441476208787228,
'rs12938538':0.0161973535124391,
'rs148511027':0.0655797147284484,
'rs8089411':0.0182843084265308,
'rs35283980':0.0174507295105361,
'rs533722308':0.0216027160282422,
'rs11876000':0.0166155475571774,
'rs9959454':0.0297894708318556,
'rs10412482':0.0224283711854865,
'rs17501397':0.0330214446829107,
'rs59710626':0.024485667699167,
'rs4802297':0.0382226383687185,
'rs11673591':0.0318122713303704,
'rs2659051':0.0402066275747111,
'rs61752561':0.0614524790871932,
'rs76765083':0.115277591395901,
'rs6039055':0.0157787563890409,
'rs11480453':0.0178677189635057,
'rs6141551':0.0178677189635057,
'rs73909841':0.0437551269686795,
'rs6126986':0.024485667699167,
'rs139135938':0.0187004986662434,
'rs381331':0.0220157398177203,
'rs3787099':0.044539760392411,
'rs1058319':0.0480531731156091,
'rs11701433':0.0174507295105361,
'rs61735792':0.100715086573082,
'rs9978557':0.0370278797557749,
'rs1978060':0.0228406108765278,
'rs9625483':0.0610753236297918,
'rs17886163':0.202488317060094,
'rs555607708':0.16938049531195,
'rs138708':0.0652061280543119,
'rs34584683':0.0297894708318556,
'rs6003062':0.0666985504229953,
'rs5759167':0.0511525224473813,
'rs9615099':0.0182843084265308,
'rs960417':0.0203612826477079,
'rs17321482':0.0253058652647703,
'rs5972255':0.0136796972911926,
'rs11338635':0.0425755124401906,
'rs5943724':0.0199466816788423,
'rs4826594':0.00389116623691048,
'rs5919393':0.0253058652647703,
'rs371707439':0.0228406108765278
}

european_percentiles = [
4.451408184,
4.628725037,
4.700839185,
4.753596845,
4.798666967,
4.838802955,
4.880083024,
4.924474528,
4.977981802,
5.051458919,
5.231833358
]
african_percentiles = [
4.61344658,
4.774096133,
4.844392162,
4.894343515,
4.937408604,
4.97949154,
5.021142981,
5.066605339,
5.11812442,
5.193068301,
5.385264272,
]
hispanic_percentiles = [
4.499787797,
4.660026539,
4.731383531,
4.780811482,
4.822881413,
4.863299644,
4.904353545,
4.947256024,
4.997989394,
5.068275689,
5.234825176
]
east_asian_percentiles = [
4.410374143,
4.57001424,
4.637033987,
4.685871804,
4.727077728,
4.764448672,
4.80216093,
4.843787238,
4.891494086,
4.956232465,
5.11587829
]

percentile_index_dict = {
0:0,
1:0,
2:1,
3:2,
4:3,
5:4,
6:4,
7:5,
8:6,
9:7,
10:8,
11:9
}

european_odds = [
    0.24,
    0.43,
    0.57,
    0.69,
    1.00,
    1.29,
    1.74,
    2.39,
    4.88,
    11.17
]
african_odds = [
    0.30,
    0.46,
    0.62,
    0.72,
    1.00,
    1.23,
    1.68,
    2.34,
    3.67,
    5.85
]
hispanic_odds = [
    0.40,
    0.60,
    0.69,
    0.86,
    1.00,
    1.45,
    1.90,
    2.79,
    4.01,
    7.68
]
east_asian_odds = [
    0.40,
    0.61,
    0.73,
    0.91,
    1.00,
    1.48,
    1.98,
    2.33,
    5.06,
    12.13
]

european_base_odds = 0.15340253748558247
african_base_odds = 0.41442715700141436
hispanic_base_odds = 0.11607142857142856
east_asian_base_odds = 0.08577633007600434

def search_index(arr: list, x: float) -> int:
    low = 0
    high = len(arr) - 1
    med = 0 
    while low <= high:
        med = (low + high)//2
        if arr[med] < x:
            low = med + 1
        elif arr[med] > x:
            high = med -1
        else:
            return med

def odds_to_probability(num: float) -> float:
    return num/(1+num)



def calculate_odds(input_file, ethnicity):
    snps = al.read_vcf(input_file)
    variants = snps['variants/ID']
    sum_log_odds = 0
    for variant in variants:
        if variant in list(log_odds_dict.keys()):
            sum_log_odds += log_odds_dict[variant]
    sys.stdout.write(f'Sum of log odds is {sum_log_odds} \n')

    if ethnicity == 'E':
        active_percentiles = european_percentiles
        active_odds = european_odds
        active_base_odds = european_base_odds
    elif ethnicity == 'A':
        active_percentiles = african_percentiles
        active_odds = african_odds
        active_base_odds = african_base_odds
    elif ethnicity == 'EA':
        active_percentiles = east_asian_percentiles
        active_odds = east_asian_odds
        active_base_odds = east_asian_base_odds
    elif ethnicity == 'H':
        active_percentiles = hispanic_percentiles
        active_odds = hispanic_odds
        active_base_odds = hispanic_base_odds

    active_percentiles.append(sum_log_odds)
    sorted_active_percentiles = sorted(active_percentiles)
    index = search_index(sorted_active_percentiles, sum_log_odds)
    percentile_row = percentile_index_dict[index]

    adjusted_odds = active_base_odds * active_odds[percentile_row]
    lifetime_risk = odds_to_probability(adjusted_odds)

    sys.stdout.write(f'Lifetime risk of prostate cancer is: {lifetime_risk}')
    row = [input_file, ethnicity, sum_log_odds, lifetime_risk]
    return row

def write_single_result(row, output):
    header = ['input_file', 'ethnicity', 'sum log odds', 'lifetime risk']
    with open(output, 'w') as f:
        writer = csv.writer(f)
        writer.writerow(header)
        writer.writerow(row)
    return None

def write_multiple_rows(list_of_lists, output):
    header = ['input_file', 'ethnicity', 'sum log odds', 'lifetime risk']
    with open(output, 'w') as f:
        writer = csv.writer(f)
        writer.writerow(header)
        for list in list_of_lists:
            writer.writerow(list)
        return None

parser = argparse.ArgumentParser()

parser.add_argument('-i', '--input', help = 'vcf file')
parser.add_argument('-o', '--output', required = True, help = 'output filename, outputs as a csv')
parser.add_argument('-e', '--ethnicity', required= True, choices = ['E', 'A', 'EA', 'H'], help= 'run -h to see options')
parser.add_argument('-d', '--directory', help = 'directory containing vcf files. note that all vcfs in a directory must be of the same ethnicity')

args = parser.parse_args(sys.argv[1:])

if args.input and args.directory:
    raise Exception('Use -i or -d, not both')

if not args.input and not args.directory:
    raise Exception('Give an input')

if args.input:
    result = calculate_odds(args.input, args.ethnicity)
    write_single_result(result, args.output)

if args.directory:
    fpath = str(args.directory)
    fpath.encode('unicode_escape')
    results = []
    for file in os.listdir(args.directory):
        if file.endswith('.vcf'):
            result = calculate_odds(os.path.join(fpath, file), args.ethnicity)
            results.append(result)
            result = []
    write_multiple_rows(results, args.output)
